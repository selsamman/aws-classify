service: 'aws-classify-tests'

custom:
  stage: ${opt:stage,'dev'}
  hostedZoneName: awsclassify.com.
  domainName: test.awsclassify.com
  certificateARN: ""
  handler: "src/server-responses/index"
  # bucket name is based on the domain, tweak this as appropriate
  bucketName: ${self:custom.domainName}
  #s3Sync:
  #  - bucketName: ${self:custom.bucketName}
  #    localDir: ./static
  cloudfrontInvalidate:
    - distributionIdKey: CloudFrontId
      items:
        - "/*"
  serverless-offline:
    httpPort: 4000
  dynamodb:
    # If you only want to use DynamoDB Local in some stages, declare them here
    stages:
      - dev
    start:
      port: 8000
      inMemory: true
      heapInitial: 200m
      heapMax: 1g
      migrate: true
      convertEmptyValues: true
  #scripts:
    #hooks:
      #'before:deploy:deploy': npm run build:static

plugins:
  - serverless-plugin-scripts
#  - serverless-s3-sync
  - serverless-cloudfront-invalidate
  - serverless-plugin-typescript
  - serverless-dynamodb-local
  - serverless-offline

provider:
  name: aws
  runtime: nodejs16.x
  region: us-east-1
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:UpdateItem
          Resource: "*"
  websocketsApiRouteSelectionExpression: $request.body.action # custom routes are selected by the value of the action property in the body
  logs:
    websocket: true
  environment:
    APIG_ENDPOINT:
      Fn::Join:
        - ""
        - - Ref: WebsocketsApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${opt:stage, 'dev'}

functions:
  responseHandler:
    handler: ${self:custom.handler}.responseHandler
    events:
      - httpApi:
          path: /api/dispatch
          method: ANY
  connectHandler:
    handler: ${self:custom.handler}.webSocketConnect
    events:
      - websocket: $connect
  disconnectHandler:
    handler: ${self:custom.handler}.webSocketDisconnect
    events:
      - websocket: $disconnect

resources:
  Resources:
    CloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment: !Join ["-", ["access-identity", !GetAtt S3Bucket.DomainName]]
    CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      DependsOn:
        - S3Bucket
      Properties:
        DistributionConfig:
          PriceClass: PriceClass_All
          ViewerCertificate:
            CloudFrontDefaultCertificate: true
          Enabled: true
          HttpVersion: http2
          DefaultRootObject: index.html
          Origins:
            - Id: api
              DomainName: !Join [".", [!Ref HttpApi, "execute-api", !Ref AWS::Region, "amazonaws.com"]]
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
            - Id: static
              DomainName: !GetAtt S3Bucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Join ["", ["origin-access-identity/cloudfront/", !Ref CloudFrontOriginAccessIdentity]]
          CacheBehaviors:
            - PathPattern: api/*
              TargetOriginId: api
              # recently deprecated style of setting ForwardedValues
              # but currently there's no alternative if using CloudFormation
              ForwardedValues:
                QueryString: true
              ViewerProtocolPolicy: redirect-to-https
              AllowedMethods: [GET, HEAD, OPTIONS, PATCH, POST, PUT, DELETE]
              # No caching by default but caching can be set with appropriate headers in the api responses
              MinTTL: 0
              DefaultTTL: 0
          DefaultCacheBehavior:
            TargetOriginId: static
            # 'Managed-CachingOptimized'
            # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-cache-policies.html
            CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6
            # 'Managed-CORS-S3Origin'
            # https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/using-managed-origin-request-policies.html
            OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf
            ViewerProtocolPolicy: redirect-to-https
    S3Bucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
    S3BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3Bucket
        PolicyDocument:
          Statement:
            - Effect: Allow
              Action: "s3:GetObject"
              Resource: !Join ["", [!GetAtt S3Bucket.Arn, "/*"]]
              Principal:
                CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
    CustomDNSName:
      Type: AWS::Route53::RecordSetGroup
      Properties:
        HostedZoneName: ${self:custom.hostedZoneName}
        RecordSets:
          - Name: ${self:custom.domainName}
            Type: A
            AliasTarget:
              HostedZoneId: Z2FDTNDATAQYW2 #cloudfront hostedzone id
              DNSName:
                Fn::GetAtt:
                  - CloudFrontDistribution
                  - DomainName
    DynamoTables:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: classifySessionStore
        BillingMode: PAY_PER_REQUEST
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
        KeySchema:
          - AttributeName: sessionId
            KeyType: HASH
        TimeToLiveSpecification:
          AttributeName: expires
          Enabled: true
  Outputs:
    CloudFrontId:
      Description: CloudFront Id
      Value: !Ref CloudFrontDistribution
      Export:
        Name: CloudFrontId
